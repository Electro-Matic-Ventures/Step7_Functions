FUNCTION "Array.Any.Length" : UDInt
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "array" : Variant;
   END_VAR

   VAR_TEMP 
      status : DInt;
      ret : UDInt;
   END_VAR


BEGIN
	#ret := CountOfElements(#array);
	#"Array.Any.Length" := #ret;
END_FUNCTION

FUNCTION "WString.Find_Multiple.Breadth" : Int
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      body : WString;
      terms : Array[*] of WString[1];
   END_VAR

   VAR_TEMP 
      _i : Int;
      _length : UDInt;
      _min : Int;
      _position : Int;
   END_VAR

   VAR CONSTANT 
      BLANK : WString;
   END_VAR


BEGIN
	(* 
	    Depth first search of 'body' for first occurance of any element of 'terms'.
	    For depth first search use WString.Find_Multiple.Depth.
	    Returns character postion in the string (1 indexed).
	    E.G.: 
	        - body := WSTRING#'today?'
	        - terms := <WSTRING#>['?', 'ay']
	        - returns --> 6
	    E.G.:
	        - body := WSTRING#'today?'
	        - terms := <WSTRING#>['ay', '?']
	        - returns --> 4
	*)
	
	#_length := "Array.Any.Length"(#terms);
	
	IF #_length = 0 OR #body = #BLANK THEN
	    #"WString.Find_Multiple.Breadth" := 0;
	    RETURN;
	END_IF;
	
	FOR #_i := 0 TO UDINT_TO_INT(#_length) - 1 DO
	    #_position := FIND(IN1 := #body,
	                       IN2 := #terms[#_i]);
	    IF #_position = 0 THEN
	        CONTINUE;
	    END_IF;
	    IF #_position < #_min OR #_min = 0 THEN
	        #_min := #_position;
	    END_IF;
	END_FOR;
	
	#"WString.Find_Multiple.Breadth" := #_min;
END_FUNCTION

FUNCTION "WString.Split_Multiple.Clean_Output" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "pointer" : Int;
   END_VAR

   VAR_IN_OUT 
      substrings : Array[*] of WString;
   END_VAR

   VAR_TEMP 
      _i : Int;
   END_VAR

   VAR CONSTANT 
      BLANK : WString;
   END_VAR


BEGIN
	FOR #_i := #"pointer" TO UDINT_TO_INT("Array.Any.Length"(#substrings)) - 1 DO
	    #substrings[#_i] := wstring#'';
	END_FOR;
END_FUNCTION

FUNCTION "WString.Split_Multiple" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      wstring_in : WString;
      delimeters : Array[*] of WString[1];
      "pointer" : Int;
   END_VAR

   VAR_OUTPUT 
      substrings : Array[*] of WString[20];
   END_VAR

   VAR_TEMP 
      _i : Int;
      _position : Int;
      _return : WString;
      _split : WString;
   END_VAR


BEGIN
	REGION "GET POSITION OF DELIMETER IN STRING"
	    #_position := "WString.Find_Multiple.Breadth"(body := #wstring_in,
	                                                  terms := #delimeters);
	END_REGION
	
	REGION "BASE CASE"
	    IF #_position = 0 THEN
	        #substrings[#pointer] := #wstring_in;
	        "WString.Split_Multiple.Clean_Output"("pointer" := #pointer + 1,
	                                              substrings := #substrings);
	        RETURN;
	    END_IF;
	END_REGION
	
	
	REGION "RECURSIVE CASE"
	    #substrings[#pointer] := LEFT(IN := #wstring_in, L := #_position);
	    "WString.Split_Multiple"(wstring_in := RIGHT(IN := #wstring_in, L := LEN(#wstring_in) - #_position),
	                             delimeters := #delimeters,
	                             "pointer" := #pointer + 1,
	                             substrings => #substrings);
	END_REGION
	
END_FUNCTION

