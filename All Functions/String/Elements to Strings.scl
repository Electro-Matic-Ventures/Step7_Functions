TYPE "Element Lengths"
VERSION : 0.1
   STRUCT
      year : Int;
      month : Int;
      day : Int;
      hour : Int;
      minute : Int;
      second : Int;
   END_STRUCT;

END_TYPE

TYPE "String Buffer"
VERSION : 0.1
   STRUCT
      me : Array[0..9] of String [10];
   END_STRUCT;

END_TYPE

TYPE "Elements as Strings"
VERSION : 0.1
   STRUCT
      year : String[4];
      month : String[2];
      day : String[2];
      hour : String[2];
      minute : String[2];
      second : String[2];
   END_STRUCT;

END_TYPE

TYPE "Byte Buffer"
VERSION : 0.1
   STRUCT
      me : Array[0..7] of Byte;
   END_STRUCT;

END_TYPE

FUNCTION "Trim" : String
TITLE = Trim
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Machado
FAMILY : 'String'
VERSION : 1.0
//removes leading and trailing whitespace from input string
   VAR_INPUT 
      "string" : String;
   END_VAR

   VAR_TEMP 
      ret : String;
   END_VAR

   VAR CONSTANT 
      space : String := ' ';
   END_VAR


BEGIN
	#ret := #string;
	WHILE LEFT(IN := #ret, L := 1) = #space DO
	    #ret := RIGHT(IN := #ret, L := LEN(#ret) - 1);
	END_WHILE;
	WHILE RIGHT(IN := #ret, L := 1) = #space DO
	    #ret := LEFT(IN := #ret, L := LEN(#ret) - 1);
	END_WHILE;
	#Trim := #ret;
END_FUNCTION

FUNCTION "Strip Sign" : String
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "string" : String;
   END_VAR

   VAR_TEMP 
      Length : Int;
      "String Box" : String;
      "Test Character" : String;
   END_VAR

   VAR CONSTANT 
      "+" : Char := '+';
      "-" : Char := '-';
   END_VAR


BEGIN
	#"String Box" := #string;
	#"Test Character" := LEFT_STRING(IN := #"String Box",
	                                  L := 1);
	IF #"Test Character" = #"+" OR #"Test Character" = #"-" THEN
	    #Length := LEN(#"String Box");
	    #"String Box" := RIGHT_STRING(IN := #"String Box", L := #Length - 1);
	    
	END_IF;
	#"Strip Sign" := #"String Box";
END_FUNCTION

FUNCTION "Add Leading" : String
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "Leading Character" : Char;
      "Desired Length" : USInt;
      "String" : String;
   END_VAR

   VAR_TEMP 
      Length : Int;
      "String Box" : String;
   END_VAR


BEGIN
	#"String Box" := #String;
	#Length := LEN(#"String Box");
	
	WHILE #Length < #"Desired Length" DO
	    #"String Box" := CONCAT_STRING(IN1 := #"Leading Character",
	                                    IN2 := #"String Box");
	    #Length := LEN(#"String Box");
	END_WHILE;
	
	#"Add Leading" := #"String Box";
END_FUNCTION

FUNCTION "Resolve Element Lengths" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      formatCodes : "String Buffer";
   END_VAR

   VAR_OUTPUT 
      elementLengths : "Element Lengths";
      "error message" : String;
   END_VAR

   VAR_TEMP 
      code : String;
      pCode : Int;
      errorFlag : Bool;
   END_VAR


BEGIN
	#errorFlag := TRUE;
	FOR #pCode := 0 TO 9 DO
	    #code := #formatCodes.me[#pCode];
	    IF #code = '' THEN
	        RETURN;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'Y') <> 0 THEN
	        #elementLengths.year := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'M') <> 0 THEN
	        #elementLengths.month := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'D') <> 0 THEN
	        #elementLengths.day := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'H') <> 0 THEN
	        #elementLengths.hour := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'I') <> 0 THEN
	        #elementLengths.minute := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	    IF FIND(IN1 := #code, IN2 := 'S') <> 0 THEN
	        #elementLengths.second := LEN(#code);
	        #errorFlag := FALSE;
	        GOTO NEXT;
	    END_IF;
	NEXT:
	    ;
	END_FOR;
	IF #errorFlag THEN
	    #"error message" := 'no valid format code found';
	END_IF;
END_FUNCTION

FUNCTION "Parse Date_And_Time Elements" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "date & Time" : Date_And_Time;
   END_VAR

   VAR_OUTPUT 
      "elements as string array" : "String Buffer";
   END_VAR

   VAR_TEMP 
      byteBuffer : "Byte Buffer";
      pos : DInt;
      ret : "String Buffer";
      _ret_val : Int;
      pBuffer : Int;
   END_VAR


BEGIN
	#_ret_val := Serialize(SRC_VARIABLE := #"date & Time",
	                       DEST_ARRAY => #byteBuffer.me,
	                       POS := #pos);
	FOR #pBuffer := 0 TO 7 DO
	    #ret.me[#pBuffer] := "Trim"("Strip Sign"(INT_TO_STRING(BCD16_TO_INT(BYTE_TO_WORD(#byteBuffer.me[#pBuffer])))));
	END_FOR;
	#"elements as string array" := #ret;
	
END_FUNCTION

FUNCTION "Add Leading Characters to Elements" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      elementLengths : "Element Lengths";
      elementsAsStringArray : "String Buffer";
   END_VAR

   VAR_OUTPUT 
      elementsAsStrings : "Elements as Strings";
      "error message" : String;
   END_VAR

   VAR_TEMP 
      ret : "Elements as Strings";
   END_VAR


BEGIN
	CASE #elementLengths.year OF
	    0:
	        #ret.year := '';
	    2:
	        #ret.year := "Add Leading"("Leading Character" := '0',
	                                   "Desired Length" := 2,
	                                   "String" := #elementsAsStringArray.me[0]);
	    4:
	        #ret.year := CONCAT_STRING(IN1 := '20',
	                                   IN2 := "Add Leading"("Leading Character" := '0',
	                                                        "Desired Length" := 2,
	                                                        "String" := #elementsAsStringArray.me[0]));
	    ELSE
	        #"error message" := 'invalid year format code';
	END_CASE;
	CASE #elementLengths.month OF
	    0:
	        #ret.month := '';
	    1:
	        #ret.month := #elementsAsStringArray.me[1];
	    2:
	        #ret.month := "Add Leading"("Leading Character" := '0',
	                                    "Desired Length" := 2,
	                                    "String" := #elementsAsStringArray.me[1]);
	    ELSE
	        #"error message" := 'invalid month format code';
	END_CASE;
	CASE #elementLengths.day OF
	    0:
	        #ret.day := '';
	    1:
	        #ret.day := #elementsAsStringArray.me[2];
	    2:
	        #ret.day := "Add Leading"("Leading Character" := '0',
	                                  "Desired Length" := 2,
	                                  "String" := #elementsAsStringArray.me[2]);
	    ELSE
	        #"error message" := 'invalid day format code';
	END_CASE;
	CASE #elementLengths.hour OF
	    0:
	        #ret.hour := '';
	    1:
	        #ret.hour := #elementsAsStringArray.me[3];
	    2:
	        #ret.hour := "Add Leading"("Leading Character" := '0',
	                                   "Desired Length" := 2,
	                                   "String" := #elementsAsStringArray.me[3]);
	    ELSE
	        #"error message" := 'invalid hour format code';
	END_CASE;
	CASE #elementLengths.minute OF
	    0:
	        #ret.minute := '';
	    1:
	        #ret.minute := #elementsAsStringArray.me[4];
	    2:
	        #ret.minute := "Add Leading"("Leading Character" := '0',
	                                     "Desired Length" := 2,
	                                     "String" := #elementsAsStringArray.me[4]);
	    ELSE
	        #"error message" := 'invalid minute format code';
	END_CASE;
	CASE #elementLengths.second OF
	    0:
	        #ret.second := '';
	    1:
	        #ret.second := #elementsAsStringArray.me[5];
	    2:
	        #ret.second := "Add Leading"("Leading Character" := '0',
	                                    "Desired Length" := 2,
	                                    "String" := #elementsAsStringArray.me[5]);
	    ELSE
	        #"error message" := 'invalid second format code';
	END_CASE;
	#elementsAsStrings := #ret;
END_FUNCTION

FUNCTION "Elements to Strings" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "date & time" : Date_And_Time;
      formatCodes : "String Buffer";
   END_VAR

   VAR_OUTPUT 
      "date & time as string" : "Elements as Strings";
      "error message" : String;
   END_VAR

   VAR_TEMP 
      elementLengths : "Element Lengths";
      elementsAsStringArray : "String Buffer";
      pElement : Int;
      ret : "Elements as Strings";
      stringBox : String;
      retErr : String;
   END_VAR


BEGIN
	"Resolve Element Lengths"(formatCodes := #formatCodes,
	                          elementLengths => #elementLengths,
	                          "error message"=>#retErr);
	IF #retErr <> '' THEN
	    RETURN;
	END_IF;
	"Parse Date_And_Time Elements"("date & Time" := #"date & time",
	                               "elements as string array" => #elementsAsStringArray);
	"Add Leading Characters to Elements"(elementLengths := #elementLengths,
	                                     elementsAsStringArray := #elementsAsStringArray,
	                                     elementsAsStrings => #ret,
	                                     "error message" => #retErr);
	#"date & time as string" := #ret;
	#"error message" := #retErr;
END_FUNCTION

