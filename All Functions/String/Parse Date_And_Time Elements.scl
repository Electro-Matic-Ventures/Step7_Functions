TYPE "Byte Buffer"
VERSION : 0.1
   STRUCT
      me : Array[0..7] of Byte;
   END_STRUCT;

END_TYPE

TYPE "String Buffer"
VERSION : 0.1
   STRUCT
      me : Array[0..9] of String [10];
   END_STRUCT;

END_TYPE

FUNCTION "Trim" : String
TITLE = Trim
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : Machado
FAMILY : 'String'
VERSION : 1.0
//removes leading and trailing whitespace from input string
   VAR_INPUT 
      "string" : String;
   END_VAR

   VAR_TEMP 
      ret : String;
   END_VAR

   VAR CONSTANT 
      space : String := ' ';
   END_VAR


BEGIN
	#ret := #string;
	WHILE LEFT(IN := #ret, L := 1) = #space DO
	    #ret := RIGHT(IN := #ret, L := LEN(#ret) - 1);
	END_WHILE;
	WHILE RIGHT(IN := #ret, L := 1) = #space DO
	    #ret := LEFT(IN := #ret, L := LEN(#ret) - 1);
	END_WHILE;
	#Trim := #ret;
END_FUNCTION

FUNCTION "Strip Sign" : String
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "string" : String;
   END_VAR

   VAR_TEMP 
      Length : Int;
      "String Box" : String;
      "Test Character" : String;
   END_VAR

   VAR CONSTANT 
      "+" : Char := '+';
      "-" : Char := '-';
   END_VAR


BEGIN
	#"String Box" := #string;
	#"Test Character" := LEFT_STRING(IN := #"String Box",
	                                  L := 1);
	IF #"Test Character" = #"+" OR #"Test Character" = #"-" THEN
	    #Length := LEN(#"String Box");
	    #"String Box" := RIGHT_STRING(IN := #"String Box", L := #Length - 1);
	    
	END_IF;
	#"Strip Sign" := #"String Box";
END_FUNCTION

FUNCTION "Parse Date_And_Time Elements" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "date & Time" : Date_And_Time;
   END_VAR

   VAR_OUTPUT 
      "elements as string array" : "String Buffer";
   END_VAR

   VAR_TEMP 
      byteBuffer : "Byte Buffer";
      pos : DInt;
      ret : "String Buffer";
      _ret_val : Int;
      pBuffer : Int;
   END_VAR


BEGIN
	#_ret_val := Serialize(SRC_VARIABLE := #"date & Time",
	                       DEST_ARRAY => #byteBuffer.me,
	                       POS := #pos);
	FOR #pBuffer := 0 TO 7 DO
	    #ret.me[#pBuffer] := "Trim"("Strip Sign"(INT_TO_STRING(BCD16_TO_INT(BYTE_TO_WORD(#byteBuffer.me[#pBuffer])))));
	END_FOR;
	#"elements as string array" := #ret;
	
END_FUNCTION

