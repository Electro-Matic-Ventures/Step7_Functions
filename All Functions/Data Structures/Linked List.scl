TYPE "Linked List: Node: Data"
VERSION : 0.1
   STRUCT
      place_holder : Int;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Node: Meta"
VERSION : 0.1
   STRUCT
      key : DInt := "NULL_TOKEN";
      is_head : int;
      is_tail : Bool;
      next : DInt := "NULL_TOKEN";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Node"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      meta { S7_SetPoint := 'False'} : "Linked List: Node: Meta";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Key: In"
VERSION : 0.1
   STRUCT
      key : DInt;
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Key: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
      found : Bool;
      not_found : Bool;
      returned_node : "Linked List: Node";
   END_STRUCT;

END_TYPE

TYPE "Linked List: List"
VERSION : 0.1
   STRUCT
      me : Array[0.."LINKED_LIST_LENGTH"] of "Linked List: Node";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Append: In"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Is Empty" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : Bool;
   END_VAR


BEGIN
	#ret := TRUE;
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key <> "NULL_TOKEN" THEN
	        #ret := FALSE;
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Is Empty" := #ret;
END_FUNCTION

TYPE "Linked List: Method Interface: Reset: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reset: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Append: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error { S7_SetPoint := 'True'} : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Re-Head: In"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Key"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Search: Key: In";
      out : "Linked List: Method Interface: Search: Key: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      list { S7_SetPoint := 'False'} : "Linked List: List";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Re-Head: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Data: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
      found : Bool;
      not_found : Bool;
      returned_node : "Linked List: Node";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Data: In"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Delete: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Delete: In"
VERSION : 0.1
   STRUCT
      key : DInt;   // key of node to be deleted
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert: In"
VERSION : 0.1
   STRUCT
      after_node : DInt;   // key of node after which new node is to be inserted
      data : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Data"
VERSION : 0.1
   STRUCT
      in : "Linked List: Method Interface: Search: Data: In";
      out : "Linked List: Method Interface: Search: Data: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Get Head" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.is_head THEN
	        #ret := #list.me[#pointer_list];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Get Head" := #ret;
END_FUNCTION

FUNCTION "Linked List: Get Previous" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      key : DInt;
   END_VAR

   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      list_pointer : DInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	#ret.meta.key := "NULL_TOKEN";
	#ret.meta.next := "NULL_TOKEN";
	FOR #list_pointer := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#list_pointer].meta.next = #key THEN
	        #ret := #list.me[#list_pointer];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Get Previous" := #ret;
END_FUNCTION

FUNCTION "Linked List: Search: Key" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Search: Key";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Search: Key";
      found : Bool;
      pointer_list : DInt;
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      searched_empty_list : String := 'searched empty list';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: EMPTY LIST"
	    IF "Linked List: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.not_found := TRUE;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #searched_empty_list;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "SEARCH"
	    FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	        IF #list.me[#pointer_list].meta.key = #commands.in.key THEN
	            #found := TRUE;
	            EXIT;
	        END_IF;
	    END_FOR;
	END_REGION
	
	REGION "EXIT CONDITION: FOUND"
	    IF #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.found := TRUE;
	        #commands.out.returned_node := #list.me[#pointer_list];
	        #commands.out.error_message := #no_error;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: NOT FOUND"
	    IF NOT #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.not_found := TRUE;
	        RETURN;
	    END_IF;
	END_REGION
	
END_FUNCTION

TYPE "Linked List: Method Interface: Append"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Is Full" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : Bool;
   END_VAR


BEGIN
	#ret := TRUE;
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key = "NULL_TOKEN" THEN
	        #ret := FALSE;
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Is Full" := #ret;
END_FUNCTION

FUNCTION "Linked List: Get Tail" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : Int;
      next_node : UInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.is_tail THEN
	        #ret := #list.me[#pointer_list];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Get Tail" := #ret;
END_FUNCTION

FUNCTION "Linked List: Next Empty Node" : DInt
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      node : "Linked List: Node";
      pointer_list : Int;
      ret : DInt;
   END_VAR


BEGIN
	#ret := "NULL_TOKEN";
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key = "NULL_TOKEN" THEN
	        #ret := INT_TO_DINT(#pointer_list);
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Next Empty Node" := #ret;
END_FUNCTION

TYPE "Linked List: Method Interface: Reset"
VERSION : 0.1
   STRUCT
      in : "Linked List: Method Interface: Reset: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reset: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Re-Head"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Re-Head: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Re-Head: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Insert: In";
      out : "Linked List: Method Interface: Insert: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Delete"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Delete: In";
      out : "Linked List: Method Interface: Delete: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reverse: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reverse: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Display: In";
      out : "Linked List: Method Interface: Display: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Reset" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Reset";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      blank_node : "Linked List: Node";
      list_pointer : DInt;
      clear_commands : "Linked List: Method Interface: Reset";
   END_VAR


BEGIN
	// for loop needed because temps don't start with initial values
	#blank_node.meta.key := "NULL_TOKEN";
	#blank_node.meta.next := "NULL_TOKEN";
	FOR #list_pointer := 0 TO "LINKED_LIST_LENGTH" DO
	    #list.me[#list_pointer] := #blank_node;
	END_FOR;
	#commands := #clear_commands;
	#commands.out.done := TRUE;
END_FUNCTION

FUNCTION "Linked List: Append" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Append";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_new_node : DInt;
      clear_commands : "Linked List: Method Interface: Append";
      tail : "Linked List: Node";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      list_full : String := 'appended to full list';
      no_tail_found : String := 'no tail found while trying to append';
      list_empty : String := 'appended to empty list. first re-head the list.';
   END_VAR


BEGIN
	REGION "NOTES"
	    (*
	    Append will place the new node into the first blank space in the host array.
	    The tail node's next will get the array index in the host array of the new node.
	    Cannot append to empty list.
	    If you want to change this, delete the contents of the if statement under EXIT
	    CONDITIN: APPENDED TO EMPTY LIST, and replay with a call Linked List: Re-Head call plus
	    appropriate error and interface handling.
	    Last edit: 2021-10-05
	    *)
	END_REGION
	
	REGION "EXIT CONDITION: APPENDED TO FULL LIST"
	    IF "Linked List: Is Full"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #list_full;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: APPENDED TO EMPTY LIST"
	    IF "Linked List: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #list_empty;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "FIND TAIL"
	    #tail := "Linked List: Get Tail"(#list);
	END_REGION
	
	REGION "EXIT CONDITION: TAIL NOT FOUND"
	    IF #tail.meta.key = "NULL_TOKEN" THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #no_tail_found;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "FIND FIRST NULL"
	    #pointer_new_node := "Linked List: Next Empty Node"(#list);
	END_REGION
	
	REGION "FILL IN NODE"
	    #list.me[#pointer_new_node].data := #commands.in.data;
	    #list.me[#pointer_new_node].meta.key := #pointer_new_node;
	    #list.me[#pointer_new_node].meta.is_tail := TRUE;
	    #list.me[#pointer_new_node].meta.next := "NULL_TOKEN";
	END_REGION
	
	REGION "ADJUST OLD TAIL'S NEXT"
	    #list.me[#tail.meta.key].meta.next := #pointer_new_node;
	    #list.me[#tail.meta.key].meta.is_tail := FALSE;
	END_REGION
	
	REGION "EXIT CONDITION: SUCCESS"
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
	
END_FUNCTION

FUNCTION "Linked List: Delete" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Delete";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      blank_node : "Linked List: Node";
      clear_commands : "Linked List: Method Interface: Delete";
      pointer_list : DInt;
      found : Bool;
      search_commands : "Linked List: Method Interface: Search: Key";
      previous : "Linked List: Node";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      not_found : String := 'tried to delete non-existant node';
      delete_from_empty : String := 'deleted from an empty list.';
      key_out_of_bounds : String := 'the delete node specified is out of bounds of the array';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: KEY OUT OF BOUNDS"
	    IF #commands.in.key > "LINKED_LIST_LENGTH" THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #key_out_of_bounds;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: LIST IS EMPTY"
	    IF "Linked List: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #delete_from_empty;
	    END_IF;
	END_REGION
	
	REGION "FIND NODE TO DELETE"
	    #search_commands.in.key := #commands.in.key;
	    #search_commands.in.request := TRUE;
	    "Linked List: Search: Key"(commands := #search_commands,
	                               list := #list);
	END_REGION
	
	REGION "EXIT CONDITION: SEARCH ERROR"
	    IF #search_commands.out.error AND #search_commands.out.done THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #search_commands.out.error_message;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: NODE NOT FOUND"
	    IF #search_commands.out.not_found AND #search_commands.out.done THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #not_found;
	        RETURN;
	    END_IF;
	END_REGION
	
	
	REGION "IF DELETED NODE IS HEAD"
	    IF #search_commands.out.returned_node.meta.is_head THEN
	        #list.me[#list.me[#commands.in.key].meta.next].meta.is_head := TRUE;
	        GOTO DEL;
	    END_IF;
	END_REGION
	
	REGION "GET PREVIOUS"
	    #previous := "Linked List: Get Previous"(key := #commands.in.key,
	                                             list := #list);
	END_REGION
	
	REGION "IF DELETED NODE IS TAIL"
	    IF #search_commands.out.returned_node.meta.is_tail THEN
	        #list.me[#previous.meta.key].meta.is_tail := TRUE;
	    END_IF;
	END_REGION
	
	REGION "DELETE"
	DEL:
	    #list.me[#previous.meta.key].meta.next := #list.me[#commands.in.key].meta.next;
	    #list.me[#commands.in.key] := #blank_node;
	END_REGION
	
	REGION "SUCCESS"
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
END_FUNCTION

FUNCTION "Linked List: Search: Data" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Search: Data";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Search: Data";
      found : Bool;
      pointer_list : DInt;
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      searched_empty_list : String := 'searched empty list';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: SEARCHED EMPTY LIST"
	    IF "Linked List: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.not_found := TRUE;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #searched_empty_list;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "SEARCH"
	    FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	        IF #list.me[#pointer_list].data = #commands.in.data THEN
	            #found := TRUE;
	        END_IF;
	    END_FOR;
	END_REGION
	
	REGION "FOUND"
	    IF #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.found := TRUE;
	        #commands.out.returned_node := #list.me[#pointer_list];
	        #commands.out.error_message := #no_error;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "NOT FOUND"
	    IF NOT #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.not_found := TRUE;
	        RETURN;
	    END_IF;
	END_REGION
END_FUNCTION

FUNCTION "Linked List: Display" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Display";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Display";
   END_VAR


BEGIN
	#commands := #clear_commands;
	#commands.out.list := #list;
	#commands.out.done := TRUE;
END_FUNCTION

FUNCTION "Linked List: Insert" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Insert";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Insert";
      next_empty_node_index : DInt;
      search_key : "Linked List: Method Interface: Search: Key";
      after_nodes_next : DInt;
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      inserted_into_full : String := 'attempted to insert into full list. delete a node and try again.';
      inserted_into_empty : String := 'attempted to insert into empty list. create a new head instead.';
      after_node_not_found : String := 'the node after which you attempted to insert was not found.';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: INSERTED INTO FULL LIST"
	    IF "Linked List: Is Full"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #inserted_into_full;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: INSERTED INTO EMPTY LIST"
	    IF "Linked List: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #inserted_into_empty;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "GET INDEX OF NEXT EMPTY NODE"
	    #next_empty_node_index := "Linked List: Next Empty Node"(#list);
	END_REGION
	
	REGION "FINDE AFTER NODE"
	    #search_key.in.key := #commands.in.after_node;
	    #search_key.in.request := TRUE;
	    "Linked List: Search: Key"(commands := #search_key,
	                               list := #list);
	END_REGION
	
	REGION "EXIT CONDITION: AFTER NODE SEARCH ERROR"
	    IF #search_key.out.error THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #search_key.out.error_message;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "SEARCH KEY NOT FOUND"    
	    IF #search_key.out.not_found AND #search_key.out.done THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #after_node_not_found;
	        RETURN;
	    END_IF;
	END_REGION
	
	
	REGION "PERFOM INSERTION"
	    IF #search_key.out.found AND #search_key.out.done THEN
	        
	        #search_key.out.returned_node.meta.key := #search_key.out.returned_node.meta.key;
	        #search_key.out.returned_node.meta.next := #search_key.out.returned_node.meta.next;
	        
	        REGION "INSERTION"
	            #list.me[#next_empty_node_index].data := #commands.in.data;
	            #list.me[#next_empty_node_index].meta.key := #next_empty_node_index;
	            #list.me[#next_empty_node_index].meta.next := #search_key.out.returned_node.meta.next;
	            #list.me[#search_key.out.returned_node.meta.key].meta.next := #next_empty_node_index;
	        END_REGION
	
	        REGION "EXIT CONDITION: SUCCESS"
	            #commands := #clear_commands;
	            #commands.out.done := TRUE;
	            #commands.out.error_message := #no_error;
	            RETURN;
	        END_REGION
	
	    END_IF;
	END_REGION
	
END_FUNCTION

FUNCTION "Linked List: Reverse" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Reverse";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      current : "Linked List: Node";
      next : "Linked List: Node";
      previous : "Linked List: Node";
      null_node : "Linked List: Node";
   END_VAR


BEGIN
	#previous := #null_node;
	#current := "Linked List: Get Head"(#list);
	#list.me[#current.meta.key].meta.is_head := FALSE;
	#list.me[#current.meta.key].meta.is_tail := TRUE;
	WHILE #current.meta.next <> "NULL_TOKEN" DO
	    #next := #list.me[#current.meta.next];
	    #list.me[#current.meta.key].meta.next := #previous.meta.key;
	    #previous := #current;
	    #current := #next;
	    #list.me[#current.meta.key].meta.is_head := FALSE;
	    #list.me[#current.meta.key].meta.is_tail := FALSE;
	END_WHILE;
	#list.me[#previous.meta.key] := #previous;
	#list.me[#previous.meta.key].meta.is_head := TRUE;
	#list.me[#previous.meta.key].meta.is_tail := FALSE;
END_FUNCTION

FUNCTION "Linked List: Re-Head" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Re-Head";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      head : "Linked List: Node";
      clear_commands : "Linked List: Method Interface: Re-Head";
      index_of_empyt_node : DInt;
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      re_head_full_list : String := 'attempted to re-head a full list. delet a node and try again';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: RE-HEAD EMPTY LIST"
	    IF "Linked List: Is Empty"(#list) THEN
	        #list.me[0].data := #commands.in.data;
	        #list.me[0].meta.is_head := TRUE;
	        #list.me[0].meta.is_tail := TRUE;
	        #list.me[0].meta.key := 0;
	        #list.me[0].meta.next := "NULL_TOKEN";
	        GOTO SUCCESS;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDTION: TRIED TO RE-HEAD A FULL LIST"
	    IF "Linked List: Is Full"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #re_head_full_list;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "RE-HEAD"
	    #head := "Linked List: Get Head"(#list);
	    #index_of_empyt_node := "Linked List: Next Empty Node"(#list);
	    #list.me[#index_of_empyt_node].data := #commands.in.data;
	    #list.me[#index_of_empyt_node].meta.is_head := TRUE;
	    #list.me[#index_of_empyt_node].meta.key := #index_of_empyt_node;
	    #list.me[#index_of_empyt_node].meta.next := #head.meta.key;
	    #list.me[#head.meta.key].meta.is_head := FALSE;
	    GOTO SUCCESS;
	END_REGION
	
	REGION "SUCCESS"
	SUCCESS:
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
END_FUNCTION

TYPE "Linked List: Method Interface"
VERSION : 0.1
   STRUCT
      append { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append";   // adds node containing data specified to end of list
      delete : "Linked List: Method Interface: Delete";   // removes the specified node
      display : "Linked List: Method Interface: Display";
      insert { S7_SetPoint := 'False'} : "Linked List: Method Interface: Insert";   // inserts node containing data specified after node specified
      rehead : "Linked List: Method Interface: Re-Head";
      reset : "Linked List: Method Interface: Reset";
      reverse : "Linked List: Method Interface: Reverse";
      search_data { S7_SetPoint := 'False'} : "Linked List: Method Interface: Search: Data";   // returns the specified node
      search_key : "Linked List: Method Interface: Search: Key";
   END_STRUCT;

END_TYPE

FUNCTION_BLOCK "Linked List"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      interface : "Linked List: Method Interface";
   END_VAR

   VAR 
      list { S7_SetPoint := 'False'} : "Linked List: List";
   END_VAR


BEGIN
	REGION "APPEND"
	    IF #interface.append.in.request THEN
	        "Linked List: Append"(commands := #interface.append,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "DELETE"
	    IF #interface.delete.in.request THEN
	        "Linked List: Delete"(commands := #interface.delete,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "DISPLAY"
	    IF #interface.display.in.request THEN
	        "Linked List: Display"(commands := #interface.display,
	                               list := #list);
	    END_IF;
	END_REGION
	
	REGION "INSERT"
	    IF #interface.insert.in.request THEN
	        "Linked List: Insert"(commands := #interface.insert,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "RE-HEAD"
	    IF #interface.rehead.in.request THEN
	        "Linked List: Re-Head"(commands := #interface.rehead,
	                               list := #list);
	    END_IF;
	END_REGION
	
	REGION "RESET"
	    IF #interface.reset.in.request THEN
	        "Linked List: Reset"(commands := #interface.reset,
	                             list := #list);
	    END_IF;
	END_REGION
	
	REGION "REVERSE"
	    IF #interface.reverse.in.request THEN
	        "Linked List: Reverse"(commands := #interface.reverse,
	                               list := #list);
	    END_IF;
	END_REGION
	
	REGION "SEARCH"
	    
	    REGION "DATA"
	        IF #interface.search_data.in.request THEN
	            "Linked List: Search: Data"(commands := #interface.search_data,
	                                        list := #list);
	        END_IF;
	    END_REGION
	    
	    REGION "KEY"
	        IF #interface.search_key.in.request THEN
	            "Linked List: Search: Key"(commands := #interface.search_key,
	                                       list := #list);
	        END_IF;
	    END_REGION
	    
	END_REGION
	
END_FUNCTION_BLOCK

