TYPE "Linked List: Node: Data"
VERSION : 0.1
   STRUCT
      place_holder : Int;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Node: Meta"
VERSION : 0.1
   STRUCT
      key : DInt := "NULL_TOKEN";
      is_head : Bool;
      is_tail : Bool;
      next : DInt := "NULL_TOKEN";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Node"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      meta { S7_SetPoint := 'False'} : "Linked List: Node: Meta";
   END_STRUCT;

END_TYPE

TYPE "Linked List: List"
VERSION : 0.1
   STRUCT
      me : Array[0.."LINKED_LIST_LENGTH"] of "Linked List: Node";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Private: Clear Node" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      node : "Linked List: Node";
   END_VAR

   VAR_TEMP 
      ret : "Linked List: Node";
   END_VAR


BEGIN
	#ret.meta.key := "NULL_TOKEN";
	#ret.meta.next := "NULL_TOKEN";
	#node := #ret;
END_FUNCTION

TYPE "Linked List: Method Interface: Reset: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      list { S7_SetPoint := 'False'} : "Linked List: List";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display: In"
VERSION : 0.1
   STRUCT
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
      found : Bool;
      not_found : Bool;
      returned_node : "Linked List: Node";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Search: In"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reset: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Delete: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Delete: In"
VERSION : 0.1
   STRUCT
      node { S7_SetPoint := 'False'} : "Linked List: Node";   // key of node to be deleted
      request : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert: In"
VERSION : 0.1
   STRUCT
      target_node { S7_SetPoint := 'False'} : "Linked List: Node";   // key of node after which new node is to be inserted
      data : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Append: In"
VERSION : 0.1
   STRUCT
      data { S7_SetPoint := 'False'} : "Linked List: Node: Data";
      request { S7_SetPoint := 'True'} : Bool;
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Append: Out"
VERSION : 0.1
   STRUCT
      done : Bool;
      error { S7_SetPoint := 'True'} : Bool;
      error_message : String;
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Private: Get Head" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.is_head THEN
	        #ret := #list.me[#pointer_list];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Get Head" := #ret;
END_FUNCTION

FUNCTION "Linked List: Private: Before" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      next_node : "Linked List: Node";   // next_node goes after node
      node : "Linked List: Node";   // node goes before next_node
   END_VAR


BEGIN
	#node.meta.next := #next_node.meta.key;
	IF #next_node.meta.is_head THEN
	    #next_node.meta.is_head := FALSE;
	    #node.meta.is_head := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "Linked List: Private: Tail Swap" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      new_tail : "Linked List: Node";
      old_tail : "Linked List: Node";
   END_VAR


BEGIN
	#new_tail.meta.is_tail := TRUE;
	#old_tail.meta.is_tail := FALSE;
END_FUNCTION

FUNCTION "Linked List: Private: Head Swap" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      new_head : "Linked List: Node";
      old_head : "Linked List: Node";
   END_VAR


BEGIN
	#new_head.meta.is_head := TRUE;
	#old_head.meta.is_head := FALSE;
END_FUNCTION

FUNCTION "Linked List: Private: Get Next" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      current : "Linked List: Node";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      ret : "Linked List: Node";
   END_VAR


BEGIN
	"Linked List: Private: Clear Node"(#ret);
	IF #list.me[#current.meta.key].meta.next <> "NULL_TOKEN" THEN
	    #ret := #list.me[#current.meta.next];
	END_IF;
	#"Linked List: Private: Get Next" := #ret;
END_FUNCTION

FUNCTION "Linked List: Private: Get Previous" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      current : "Linked List: Node";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      list_pointer : DInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	"Linked List: Private: Clear Node"(#ret);
	FOR #list_pointer := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#list_pointer].meta.next = #current.meta.key THEN
	        #ret := #list.me[#list_pointer];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Get Previous" := #ret;
END_FUNCTION

FUNCTION "Linked List: Private: After" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      node : "Linked List: Node";
      previous_node : "Linked List: Node";
   END_VAR


BEGIN
	#node.meta.next := #previous_node.meta.next;
	#previous_node.meta.next := #node.meta.key;
	IF #previous_node.meta.is_tail THEN
	    #previous_node.meta.is_tail := FALSE;
	    #node.meta.is_tail := TRUE;
	END_IF;
END_FUNCTION

FUNCTION "Linked List: Private: Head an Empty List" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      data : "Linked List: Node: Data";
      terminal_behavior : String;   // 'open': head's previous and tail's next are null nodes; 'closed': head's previous is tail, tail's next is head
   END_VAR

   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR


BEGIN
	#list.me[0].data := #data;
	#list.me[0].meta.key := 0;
	IF #terminal_behavior = 'open' THEN
	    #list.me[0].meta.next := "NULL_TOKEN";
	END_IF;
	IF #terminal_behavior = 'closed' THEN
	    #list.me[0].meta.next := 0;
	END_IF;
	#list.me[0].meta.is_head := TRUE;
	#list.me[0].meta.is_tail := TRUE;
END_FUNCTION

TYPE "Linked List: Method Interface: Delete"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Delete: In";
      out : "Linked List: Method Interface: Delete: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Private: Is Empty" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : Bool;
   END_VAR


BEGIN
	#ret := TRUE;
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key <> "NULL_TOKEN" THEN
	        #ret := FALSE;
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Is Empty" := #ret;
END_FUNCTION

FUNCTION "Linked List: Private: Get Tail" : "Linked List: Node"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : Int;
      next_node : UInt;
      ret : "Linked List: Node";
   END_VAR


BEGIN
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.is_tail THEN
	        #ret := #list.me[#pointer_list];
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Get Tail" := #ret;
END_FUNCTION

TYPE "Linked List: Method Interface: Search"
VERSION : 0.1
   STRUCT
      in : "Linked List: Method Interface: Search: In";
      out : "Linked List: Method Interface: Search: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Insert"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Insert: In";
      out : "Linked List: Method Interface: Insert: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Private: Is Full" : Bool
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      pointer_list : DInt;
      ret : Bool;
   END_VAR


BEGIN
	#ret := TRUE;
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key = "NULL_TOKEN" THEN
	        #ret := FALSE;
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Is Full" := #ret;
END_FUNCTION

TYPE "Linked List: Method Interface: Append"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reverse"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reverse: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reverse: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Display"
VERSION : 0.1
   STRUCT
      in { S7_SetPoint := 'False'} : "Linked List: Method Interface: Display: In";
      out : "Linked List: Method Interface: Display: Out";
   END_STRUCT;

END_TYPE

TYPE "Linked List: Method Interface: Reset"
VERSION : 0.1
   STRUCT
      in : "Linked List: Method Interface: Reset: In";
      out { S7_SetPoint := 'False'} : "Linked List: Method Interface: Reset: Out";
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Private: Next Empty Node" : DInt
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      node : "Linked List: Node";
      pointer_list : Int;
      ret : DInt;
   END_VAR


BEGIN
	#ret := "NULL_TOKEN";
	FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	    IF #list.me[#pointer_list].meta.key = "NULL_TOKEN" THEN
	        #ret := INT_TO_DINT(#pointer_list);
	        EXIT;
	    END_IF;
	END_FOR;
	#"Linked List: Private: Next Empty Node" := #ret;
END_FUNCTION

FUNCTION "Linked List: Append" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      terminal_behavior : String;
   END_VAR

   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Append";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Append";
      head : "Linked List: Node";
      pointer_new_node : DInt;
      tail : "Linked List: Node";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      list_full : String := 'appended to full list';
      no_tail_found : String := 'no tail found while trying to append';
      appended_as_head : String := 'appended as head of list';
   END_VAR


BEGIN
	REGION "NOTES"
	    (*
	    Append adds a node to the end of the list.
	    Last edit: 2021-10-05
	    *)
	END_REGION
	
	REGION "APPEND TO FULL LIST"
	    IF "Linked List: Private: Is Full"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #list_full;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "APPEND TO EMPTY LIST"
	    IF "Linked List: Private: Is Empty"(#list) THEN
	        "Linked List: Private: Head an Empty List"(data := #commands.in.data,
	                                                   terminal_behavior := #terminal_behavior,
	                                                   list := #list);
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.error_message := #appended_as_head;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "FIND TAIL"
	    #tail := "Linked List: Private: Get Tail"(#list);
	END_REGION
	
	REGION "EXIT CONDITION: TAIL NOT FOUND"
	    IF #tail.meta.key = "NULL_TOKEN" THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #no_tail_found;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "FIND FIRST NULL"
	    #pointer_new_node := "Linked List: Private: Next Empty Node"(#list);
	END_REGION
	
	REGION "APPENDED NODE IS AFTER TAIL"
	    #list.me[#pointer_new_node].data := #commands.in.data;
	    #list.me[#pointer_new_node].meta.key := #pointer_new_node;
	    "Linked List: Private: After"(node := #list.me[#pointer_new_node],
	                                  previous_node := #list.me[#tail.meta.key]);
	END_REGION
	
	REGION "EXIT CONDITION: SUCCESS"
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
	
END_FUNCTION

FUNCTION "Linked List: Delete" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Delete";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      blank_node : "Linked List: Node";
      clear_commands : "Linked List: Method Interface: Delete";
      current : "Linked List: Node";
      found : Bool;
      next : "Linked List: Node";
      pointer_list : DInt;
      previous : "Linked List: Node";
      search_commands : "Linked List: Method Interface: Search";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      delete_from_empty : String := 'deleted from an empty list.';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: LIST IS EMPTY"
	    IF "Linked List: Private: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #delete_from_empty;
	    END_IF;
	END_REGION
	
	REGION "DELETE"
	    #current := #commands.in.node;
	    #previous := "Linked List: Private: Get Previous"(current := #current,
	                                                      list := #list);
	    #next := "Linked List: Private: Get Next"(current := #current,
	                                              list := #list);
	    IF #current.meta.is_head AND NOT #current.meta.is_tail THEN
	        "Linked List: Private: Head Swap"(new_head := #list.me[#next.meta.key],
	                                          old_head := #list.me[#current.meta.key]);
	    END_IF;
	    IF NOT #current.meta.is_head AND #current.meta.is_tail THEN
	        "Linked List: Private: Tail Swap"(new_tail := #list.me[#previous.meta.key],
	                                          old_tail := #list.me[#current.meta.key]);
	    END_IF;
	    IF NOT #current.meta.is_head THEN
	        #list.me[#previous.meta.key].meta.next := #next.meta.key;
	    END_IF;
	    "Linked List: Private: Clear Node"(#list.me[#current.meta.key]);
	END_REGION
	
	REGION "COMMANDS OUT"
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
END_FUNCTION

FUNCTION "Linked List: Search" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Search";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Search";
      found : Bool;
      pointer_list : DInt;
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      searched_empty_list : String := 'searched empty list';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: SEARCHED EMPTY LIST"
	    IF "Linked List: Private: Is Empty"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.not_found := TRUE;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #searched_empty_list;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "SEARCH"
	    FOR #pointer_list := 0 TO "LINKED_LIST_LENGTH" DO
	        IF #list.me[#pointer_list].data = #commands.in.data THEN
	            #found := TRUE;
	            EXIT;
	        END_IF;
	    END_FOR;
	END_REGION
	
	REGION "FOUND"
	    IF #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.found := TRUE;
	        #commands.out.returned_node := #list.me[#pointer_list];
	        #commands.out.error_message := #no_error;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "NOT FOUND"
	    IF NOT #found THEN
	        #commands := #clear_commands;
	        #commands.out.done := TRUE;
	        #commands.out.not_found := TRUE;
	        RETURN;
	    END_IF;
	END_REGION
END_FUNCTION

FUNCTION "Linked List: Display" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Display";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Display";
   END_VAR


BEGIN
	#commands := #clear_commands;
	#commands.out.list := #list;
	#commands.out.done := TRUE;
END_FUNCTION

TYPE "Linked List: Method Interface"
VERSION : 0.1
   STRUCT
      append { S7_SetPoint := 'False'} : "Linked List: Method Interface: Append";   // adds node containing data specified to end of list
      delete : "Linked List: Method Interface: Delete";   // removes the specified node
      display : "Linked List: Method Interface: Display";
      insert { S7_SetPoint := 'False'} : "Linked List: Method Interface: Insert";   // inserts node containing data specified after node specified
      reset : "Linked List: Method Interface: Reset";
      reverse : "Linked List: Method Interface: Reverse";
      search { S7_SetPoint := 'False'} : "Linked List: Method Interface: Search";   // returns the specified node
   END_STRUCT;

END_TYPE

FUNCTION "Linked List: Insert" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      terminal_behavior : String;
   END_VAR

   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Insert";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Insert";
      current : "Linked List: Node";
      next_empty_node_index : DInt;
      previous : "Linked List: Node";
      next : "Linked List: Node";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      inserted_into_full : String := 'attempted to insert into full list. delete a node and try again.';
      appended_as_head : String := 'appended as head of list';
   END_VAR


BEGIN
	REGION "EXIT CONDITION: INSERTED INTO FULL LIST"
	    IF "Linked List: Private: Is Full"(#list) THEN
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #inserted_into_full;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "EXIT CONDITION: INSERTED INTO EMPTY LIST"
	    IF "Linked List: Private: Is Empty"(#list) THEN
	        "Linked List: Private: Head an Empty List"(data := #commands.in.data,
	                                                   terminal_behavior := #terminal_behavior,
	                                                   list := #list);
	        #commands := #clear_commands;
	        #commands.out.error := TRUE;
	        #commands.out.error_message := #appended_as_head;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "GET INDEX OF NEXT EMPTY NODE"
	    #next_empty_node_index := "Linked List: Private: Next Empty Node"(#list);
	END_REGION
	
	REGION "PREVIOUS, CURRENT, AND NEXT NODES"
	    #current := #commands.in.target_node;
	    #previous := "Linked List: Private: Get Previous"(current := #current,
	                                                      list := #list);
	    #next := #current;
	END_REGION
	
	REGION "INSERT BEFORE TARGET NODE"
	    // new node's data becomes command data
	    #list.me[#next_empty_node_index].data := #commands.in.data;
	    // new node's key becomes array index
	    #list.me[#next_empty_node_index].meta.key := #next_empty_node_index;
	    // shorten name for indexing
	    #current := #list.me[#next_empty_node_index];
	    // insert
	    IF NOT #next.meta.is_head THEN
	        "Linked List: Private: After"(node := #list.me[#current.meta.key],
	                                      previous_node := #list.me[#previous.meta.key]);
	    END_IF;
	    "Linked List: Private: Before"(next_node := #list.me[#next.meta.key],
	                                   node := #list.me[#current.meta.key]);
	END_REGION
	
	REGION "COMMANDS OUT"
	    #commands := #clear_commands;
	    #commands.out.done := TRUE;
	    #commands.out.error_message := #no_error;
	END_REGION
END_FUNCTION

FUNCTION "Linked List: Reverse" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Reverse";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      clear_commands : "Linked List: Method Interface: Reverse";
      current : "Linked List: Node";
      next : "Linked List: Node";
      previous : "Linked List: Node";
      null_node : "Linked List: Node";
   END_VAR

   VAR CONSTANT 
      no_error : String := 'no error';
      reversed_empty_list : String := 'reversed empty list';
   END_VAR


BEGIN
	IF "Linked List: Private: Is Empty"(#list) THEN
	    #commands := #clear_commands;
	    #commands.out.error := TRUE;
	    #commands.out.error_message := #reversed_empty_list;
	    RETURN;
	END_IF;
	
	"Linked List: Private: Clear Node"(#null_node);
	#previous := #null_node;
	#current := "Linked List: Private: Get Head"(#list);
	#list.me[#current.meta.key].meta.is_head := FALSE;
	#list.me[#current.meta.key].meta.is_tail := TRUE;
	WHILE #current.meta.next <> "NULL_TOKEN" DO
	    #next := #list.me[#current.meta.next];
	    #list.me[#current.meta.key].meta.next := #previous.meta.key;
	    #previous := #current;
	    #current := #next;
	    #list.me[#current.meta.key].meta.is_head := FALSE;
	    #list.me[#current.meta.key].meta.is_tail := FALSE;
	END_WHILE;
	#list.me[#current.meta.key].meta.next := #previous.meta.key;
	#list.me[#current.meta.key].meta.is_head := TRUE;
	#list.me[#current.meta.key].meta.is_tail := FALSE;
	
	#commands := #clear_commands;
	#commands.out.done := TRUE;
	#commands.out.error_message := #no_error;
END_FUNCTION

FUNCTION "Linked List: Reset" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      commands : "Linked List: Method Interface: Reset";
      list : "Linked List: List";
   END_VAR

   VAR_TEMP 
      blank_node : "Linked List: Node";
      list_pointer : DInt;
      clear_commands : "Linked List: Method Interface: Reset";
   END_VAR


BEGIN
	FOR #list_pointer := 0 TO "LINKED_LIST_LENGTH" DO
	    "Linked List: Private: Clear Node"(#list.me[#list_pointer]);
	END_FOR;
	#commands := #clear_commands;
	#commands.out.done := TRUE;
END_FUNCTION

FUNCTION_BLOCK "Linked List"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      interface : "Linked List: Method Interface";
   END_VAR

   VAR 
      list { S7_SetPoint := 'False'} : "Linked List: List";
   END_VAR

   VAR CONSTANT 
      TERMINAL_BEHAVIOR : String := 'open';
   END_VAR


BEGIN
	REGION "APPEND"
	    IF #interface.append.in.request THEN
	        "Linked List: Append"(terminal_behavior := #TERMINAL_BEHAVIOR,
	                              commands := #interface.append,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "DELETE"
	    IF #interface.delete.in.request THEN
	        "Linked List: Delete"(commands := #interface.delete,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "DISPLAY"
	    IF #interface.display.in.request THEN
	        "Linked List: Display"(commands := #interface.display,
	                               list := #list);
	    END_IF;
	END_REGION
	
	REGION "INSERT"
	    IF #interface.insert.in.request THEN
	        "Linked List: Insert"(terminal_behavior := #TERMINAL_BEHAVIOR,
	                              commands := #interface.insert,
	                              list := #list);
	    END_IF;
	END_REGION
	
	REGION "RESET"
	    IF #interface.reset.in.request THEN
	        "Linked List: Reset"(commands := #interface.reset,
	                             list := #list);
	    END_IF;
	END_REGION
	
	REGION "REVERSE"
	    IF #interface.reverse.in.request THEN
	        "Linked List: Reverse"(commands := #interface.reverse,
	                               list := #list);
	    END_IF;
	END_REGION
	
	REGION "SEARCH"
	    IF #interface.search.in.request THEN
	        "Linked List: Search"(commands := #interface.search,
	                              list := #list);
	    END_IF;
	END_REGION
	
END_FUNCTION_BLOCK

