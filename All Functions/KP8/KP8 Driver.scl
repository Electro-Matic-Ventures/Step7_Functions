TYPE "KP8: Button Parameters"
VERSION : 0.1
   STRUCT
      activate : Bool;   // true = button on, flase = button off
      "color on 1" : String[10];   // color when button is in pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color on 2" : String[10];   // second flash color when button is pressed and flashing is enabled. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color off" : String[10];   // color when button is in un-pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      flash : Bool;   // false = color 1, true = color 2. set to clock bit to flash at that rate
      group : Int;   // 0 disables. buttons in groups have a mutually exclusive 'on' state.
      mode : Bool;   // true = maintained, fales = momentary
   END_STRUCT;

END_TYPE

TYPE "KP8: Button States"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of Bool;
   END_STRUCT;

END_TYPE

TYPE "KP8: Parameters for All Buttons"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of "KP8: Button Parameters";
   END_STRUCT;

END_TYPE

FUNCTION "KP8 Driver: Button Color" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      btnNum : Int;
      lblColor : String;
   END_VAR

   VAR_IN_OUT 
      btnColor : DWord;
   END_VAR

   VAR_TEMP 
      btnMask : DWord;
      ret : DWord;
   END_VAR

   VAR CONSTANT 
      btnMskRed : DWord := dw#16#0100_0000;
      btnMskGreen : DWord := dw#16#0001_0000;
      btnMskBlue : DWord := dw#16#000_0100;
      btnMskYellow : DWord := dw#16#0101_0000;
      btnMskWhite : DWord := dw#16#0101_0100;
      btnMskBlack : DWord := dw#16#FEFE_FEFF;
      initBtnColors : DWord := dw#16#0000_0000;
   END_VAR


BEGIN
	#ret := #btnColor;
	
	#ret := #ret AND ROL(IN := #btnMskBlack,
	                     N := INT_TO_UDINT(#btnNum));
	
	IF (#lblColor = 'red') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#lblColor = 'green') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#lblColor = 'blue') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#lblColor = 'yellow') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#lblColor = 'white') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#lblColor = 'off') THEN
	    #btnMask := #btnMskRed;
	END_IF;
	
	#ret := #ret OR SHL(IN := #btnMask,
	                    N := INT_TO_UDINT(#btnNum));
	
	#btnColor := #ret;
END_FUNCTION

FUNCTION "KP8 Driver: Toggle Button State" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      kp8DI : Word;
   END_VAR

   VAR_IN_OUT 
      btnStates : "KP8: Button States";
   END_VAR

   VAR_TEMP 
      btnPress : "KP8: Button States";
      pbtn : Int;
   END_VAR


BEGIN
	REGION "COPY TO LOCAL"
	    SCATTER(IN := #kp8DI.%B1,
	            OUT => #btnPress.btn);
	END_REGION
	
	REGION "TOGGLE STATE"
	    
	    REGION "FOR EACH BUTTON"
	        FOR #pbtn := 0 TO 7 DO
	            
	            REGION "ON PRESS RISING EDGE"
	                IF #btnPress.btn[#pbtn] AND NOT #btnStates.btn[#pbtn] THEN
	                    
	                    REGION "TOGGLE"
	                        #btnStates.btn[#pbtn] := NOT #btnStates.btn[#pbtn];
	                    END_REGION
	                    
	                END_IF;
	            END_REGION
	            
	        END_FOR;
	    END_REGION
	    
	END_REGION
END_FUNCTION

FUNCTION_BLOCK "KP8 Driver"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 2.0
   VAR_INPUT 
      kp8DI : Word;
      reset : Bool;   // resets button states
      btnParams : "KP8: Parameters for All Buttons";
   END_VAR

   VAR_OUTPUT DB_SPECIFIC
      kp8DQ : DWord;
      statesOut { ExternalVisible := 'False'; ExternalWritable := 'False'} : "KP8: Button States";
   END_VAR

   VAR RETAIN
      colorMask { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DWord;
      btnStates : "KP8: Button States";
      old : Struct
         btnParams : "KP8: Parameters for All Buttons";
         btnStates : "KP8: Button States";
         kp8DI : Word;
      END_STRUCT;
   END_VAR

   VAR_TEMP 
      color : String;
      draw : Bool;
      pBtn : Int;
   END_VAR

   VAR CONSTANT 
      initBtnColors : DWord := dw#16#0000_0000;
   END_VAR


BEGIN
	REGION "ON RESET REQUEST"
	    IF #reset THEN
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "RESET STATES"
	                    #old.btnStates.btn[#pBtn] := 0;
	                    #btnStates.btn[#pBtn] := 0;
	                    #colorMask := #initBtnColors;
	                END_REGION
	
	            END_FOR;
	        END_REGION
	
	        REGION "EXIT FUNCTION"
	            RETURN;
	        END_REGION
	
	    END_IF;
	END_REGION
	
	REGION "ON CHANGE IN PARAMETER SET"
	    IF #btnParams <> #old.btnParams THEN
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "RESET MASK"
	                    #colorMask := #initBtnColors;
	                END_REGION
	
	                REGION "BUTTON COLOR FOR OFF STATE"
	                    IF #btnParams.btn[#pBtn].activate AND NOT #btnStates.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color off";
	                    END_IF;
	                END_REGION
	
	                REGION "BUTTON COLOR FOR ON STATE"
	                    IF #btnParams.btn[#pBtn].activate AND #btnStates.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color on 1";
	                    END_IF;
	                END_REGION
	                
	                REGION "DEACTIVATED BUTTON"
	                    (*
	                    This is here for redundancy.
	                    The "RESET MASK" region takes care of clearing old button colors.
	                    *)
	                    IF NOT #btnParams.btn[#pBtn].activate THEN
	                        #color := 'off';
	                    END_IF;
	                END_REGION
	                
	                REGION "DRAW COLOR"
	                    "KP8 Driver: Button Color"(btnColor := #colorMask,
	                                               btnNum := #pBtn,
	                                               lblColor := #color);
	                END_REGION
	                
	            END_FOR;
	        END_REGION
	        
	    END_IF;
	END_REGION
	
	REGION "BUTTON STATES"
	    
	    REGION "ON BUTTON PRESS"
	        IF #kp8DI <> #old.kp8DI THEN
	            
	            REGION "TOGGLE STATE"
	                "KP8 Driver: Toggle Button State"(kp8DI := #kp8DI,
	                                                  btnStates := #btnStates);
	            END_REGION
	            
	        END_IF;
	    END_REGION
	    
	END_REGION
	
	REGION "ANIMATE BUTTONS"
	    
	    REGION "FOR EACH BUTTON"
	        FOR #pBtn := 0 TO 7 DO
	            
	            REGION "ON CHANGE IN STATE TO 'ON'" 
	                IF #btnStates.btn[#pBtn] <> NOT #old.btnStates.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color on 1";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "ON CHANGE IN STATE TO 'OFF'" 
	                IF NOT #btnStates.btn[#pBtn] <> #old.btnStates.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color off";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "FLASH COLOR 1"
	                IF NOT #btnParams.btn[#pBtn].flash AND #old.btnParams.btn[#pBtn].flash THEN
	                    #color := #btnParams.btn[#pBtn]."color on 1";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "FLASH COLOR 2"
	                IF #btnParams.btn[#pBtn].flash AND NOT #old.btnParams.btn[#pBtn].flash THEN
	                    #color := #btnParams.btn[#pBtn]."color on 2";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "DRAW TO BUTTON"
	                IF #draw THEN
	                    #draw := FALSE;
	                    "KP8 Driver: Button Color"(btnColor := #colorMask,
	                                               btnNum := #pBtn,
	                                               lblColor := #color);
	                END_IF;
	            END_REGION
	            
	        END_FOR;
	    END_REGION
	    
	END_REGION
	
	REGION "CHANGE DETECTION"
	    #old.btnParams := #btnParams;
	    #old.btnStates := #btnStates;
	    #old.kp8DI := #kp8DI;
	END_REGION
	
	REGION "OUTPUT"
	    #kp8DQ := #colorMask;
	    #statesOut := #btnStates;
	END_REGION
END_FUNCTION_BLOCK

