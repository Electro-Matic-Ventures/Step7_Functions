TYPE "KP8 Driver: Parameters: 1 Button"
VERSION : 0.1
   STRUCT
      activate : Bool;   // true = button on, flase = button off
      "color on 1" : String[10];   // color when button is in pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color on 2" : String[10];   // second flash color when button is pressed and flashing is enabled. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color off" : String[10];   // color when button is in un-pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      flash : Bool;   // false = color 1, true = color 2. set to clock bit to flash at that rate
      group : Int;   // 0 disables. buttons in groups have a mutually exclusive 'on' state.
      mode : Bool;   // true = maintained, fales = momentary
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Button States"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of Bool;
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Parameters: 8 Buttons"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of "KP8 Driver: Parameters: 1 Button";
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Feedback Data"
VERSION : 0.1
   STRUCT
      acutal : "KP8 Driver: Button States";
      falling : "KP8 Driver: Button States";
      rising : "KP8 Driver: Button States";
   END_STRUCT;

END_TYPE

FUNCTION "KP8 Driver: Group" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      btnNumber : Int;
      btnsParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_IN_OUT 
      logical : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      pBtn : Int;
      retLogical : "KP8 Driver: Feedback Data";
      testGroup : Int;
      thisGroup : Int;
   END_VAR


BEGIN
	REGION "EXIT IF GROUP EQUALS 0"
	    #thisGroup := #btnsParams.btn[#btnNumber].group;
	    IF #thisGroup = 0 THEN
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "COPY TO LOCAL"
	    #retLogical := #logical;
	END_REGION
	
	REGION "FOR EACH BUTTONS' PARAMETERS"
	    FOR #pBtn := 0 TO 7 DO
	        
	        REGION "SKIP THE CURRENT BUTTON"
	            IF #pBtn = #btnNumber THEN
	                GOTO NEXT;
	            END_IF;
	        END_REGION
	        
	        REGION "GROUP EXCLUSION"
	            #testGroup := #btnsParams.btn[#pBtn].group;
	            IF #testGroup = #thisGroup THEN
	                #retLogical.acutal.btn[#pBtn] := FALSE;
	            END_IF;
	        END_REGION
	        
	    NEXT:
	        ;
	        
	    END_FOR;
	END_REGION
	        
	REGION "OUTPUT"
	    #logical := #retLogical;
	END_REGION
END_FUNCTION

FUNCTION "KP8 Driver: Toggle" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      signal : Bool;   // edge signal
   END_VAR

   VAR_IN_OUT 
      state : Bool;   // logical button state
   END_VAR


BEGIN
	IF #signal THEN
	    #state := NOT #state;
	END_IF;
END_FUNCTION

FUNCTION "Upper" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_IN_OUT 
      "string" : Variant;
   END_VAR

   VAR_TEMP 
      "type" : Bool;
      stringBox : String;
      status : Int;
      wStringBox : WString;
      charArr : Array[0..255] of Char;
      cntChar : UInt;
      pChar : Int;
   END_VAR

   VAR CONSTANT 
      asciiLow : Char := 'a';
      asciiHigh : Char := 'z';
      asciiCaseOffset : Int := 32;
   END_VAR


BEGIN
	IF TypeOf(#string) = String THEN
	    #status := MOVE_BLK_VARIANT(SRC := #string,
	                                COUNT := 1,
	                                SRC_INDEX := 0,
	                                DEST_INDEX := 0,
	                                DEST => #stringBox);
	ELSIF TypeOf(#string) = WString THEN
	    #status := MOVE_BLK_VARIANT(SRC := #string,
	                                COUNT := 1,
	                                SRC_INDEX := 0,
	                                DEST_INDEX := 0,
	                                DEST => #wStringBox);
	    #stringBox := WSTRING_TO_STRING(#wStringBox);
	ELSE
	    RETURN;
	END_IF;
	
	Strg_TO_Chars(Strg := #stringBox,
	              pChars := 0,
	              Cnt => #cntChar,
	              Chars := #charArr);
	
	FOR #pChar := 0 TO UINT_TO_INT(#cntChar) - 1 DO
	    IF #asciiLow <= #charArr[#pChar] AND #charArr[#pChar] <= #asciiHigh THEN
	        #charArr[#pChar] := INT_TO_CHAR(CHAR_TO_INT(#charArr[#pChar]) - #asciiCaseOffset);
	    END_IF;
	END_FOR;
	
	Chars_TO_Strg(Chars := #charArr,
	              pChars := 0,
	              Cnt := #cntChar,
	              Strg => #stringBox);
	
	IF TypeOf(#string) = String THEN
	    #status := MOVE_BLK_VARIANT(SRC := #stringBox,
	                                COUNT := 1,
	                                SRC_INDEX := 0,
	                                DEST_INDEX := 0,
	                                DEST => #string);
	ELSIF TypeOf(#string) = WString THEN
	    #wStringBox := STRING_TO_WSTRING(#stringBox);
	    #status := MOVE_BLK_VARIANT(SRC := #wStringBox,
	                                COUNT := 1,
	                                SRC_INDEX := 0,
	                                DEST_INDEX := 0,
	                                DEST => #string);
	END_IF;
END_FUNCTION

FUNCTION "KP8 Driver: Feedback" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      signal : Bool;
      oldSignal : Bool;
      btnNumber : Int;
   END_VAR

   VAR_IN_OUT 
      feedback : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      ret : "KP8 Driver: Feedback Data";
   END_VAR


BEGIN
	REGION "COPY TO LOCAL"
	    #ret := #feedback;
	    #ret.acutal.btn[#btnNumber] := #signal;
	END_REGION
	
	REGION "DEFAULT"
	    #ret.rising.btn[#btnNumber] := FALSE;
	    #ret.falling.btn[#btnNumber] := FALSE;
	END_REGION
	
	REGION "ON NEW INPUT"
	    IF #signal <> #oldSignal THEN
	        
	        REGION "RISING EDGE"
	            IF #signal AND NOT #oldSignal THEN
	                #ret.rising.btn[#btnNumber] := TRUE;
	            END_IF;
	        END_REGION
	        
	        REGION "FALLING EDGE"
	            IF NOT #signal AND #oldSignal THEN
	                #ret.falling.btn[#btnNumber] := TRUE;
	            END_IF;
	        END_REGION
	        
	    END_IF;
	END_REGION
	
	        
	REGION "OUTPUT"
	    #feedback := #ret;
	END_REGION
	
END_FUNCTION

FUNCTION "KP8 Driver: State" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      press : "KP8 Driver: Feedback Data";
      btnNumber : Int;
      btnParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_IN_OUT 
      state : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      pBtn : Int;
      retState : "KP8 Driver: Feedback Data";
   END_VAR


BEGIN
	REGION "RETURN ON INACTIVE BUTTON"
	    IF NOT #btnParams.btn[#btnNumber].activate THEN
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "COPY TO LOCAL"
	    #retState := #state;
	END_REGION
	        
	REGION "MODE IS MOMENTARY"
	    IF NOT #btnParams.btn[#btnNumber].mode THEN
	        #retState.acutal.btn[#btnNumber] := #press.acutal.btn[#btnNumber];
	    END_IF;
	END_REGION
	
	REGION "MAINTINED"
	    IF #btnParams.btn[#btnNumber].mode THEN
	        "KP8 Driver: Toggle"(signal := #press.rising.btn[#btnNumber],
	                             state := #retState.acutal.btn[#btnNumber]);
	    END_IF;
	END_REGION
	
	REGION "GROUP EXCLUSIVITY"
	    IF #press.rising.btn[#btnNumber] THEN
	        "KP8 Driver: Group"(btnNumber := #btnNumber,
	                            btnsParams := #btnParams,
	                            logical := #retState);
	    END_IF;
	END_REGION
	
	REGION "OUTPUT"
	    #state := #retState;
	END_REGION
END_FUNCTION

FUNCTION "KP8 Driver: Color" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      btnNum : Int;
      lblColor : String;
   END_VAR

   VAR_IN_OUT 
      btnColor : DWord;
   END_VAR

   VAR_TEMP 
      btnMask : DWord;
      uColor : String;
      ret : DWord;
   END_VAR

   VAR CONSTANT 
      btnMskRed : DWord := dw#16#0100_0000;
      btnMskGreen : DWord := dw#16#0001_0000;
      btnMskBlue : DWord := dw#16#000_0100;
      btnMskYellow : DWord := dw#16#0101_0000;
      btnMskWhite : DWord := dw#16#0101_0100;
      btnMskOff : DWord := dw#16#FEFE_FEFF;
   END_VAR


BEGIN
	#ret := #btnColor;
	
	#ret := #ret AND ROL(IN := #btnMskOff,
	                     N := INT_TO_UDINT(#btnNum));
	
	#uColor := #lblColor;
	"Upper"(#uColor);
	
	IF (#uColor = 'RED') THEN
	    #btnMask := #btnMskRed;
	ELSIF (#uColor = 'GREEN') THEN
	    #btnMask := #btnMskGreen;
	ELSIF (#uColor = 'BLUE') THEN
	    #btnMask := #btnMskBlue;
	ELSIF (#uColor = 'YELLOW') THEN
	    #btnMask := #btnMskYellow;
	ELSIF (#uColor = 'WHITE') THEN
	    #btnMask := #btnMskWhite;
	ELSIF (#uColor = 'OFF') THEN
	    ;
	END_IF;
	
	#ret := #ret OR SHL(IN := #btnMask,
	                    N := INT_TO_UDINT(#btnNum));
	
	#btnColor := #ret;
END_FUNCTION

FUNCTION_BLOCK "KP8 Driver"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 2.0
   VAR_INPUT 
      kp8DI : Word;
      reset : Bool;   // resets button states
      btnParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_OUTPUT 
      kp8DQ : DWord;
      physical : "KP8 Driver: Feedback Data";
      logical { ExternalVisible := 'False'; ExternalWritable := 'False'} : "KP8 Driver: Feedback Data";
   END_VAR

   VAR DB_SPECIFIC
      colorMask { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DWord;
      old : Struct
         btnParam : "KP8 Driver: Parameters: 8 Buttons";
         kp8DI : Word;
         logical : "KP8 Driver: Button States";
         physical : "KP8 Driver: Button States";
      END_STRUCT;
   END_VAR
   VAR 
      btnPress { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "KP8 Driver: Button States";
   END_VAR
   VAR DB_SPECIFIC
      retLogical : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      color : String;
      draw : Bool;
      pBtn : Int;
      retPhysical : "KP8 Driver: Feedback Data";
      rst : Struct
         feedback : "KP8 Driver: Feedback Data";
         state : "KP8 Driver: Button States";
      END_STRUCT;
   END_VAR

   VAR CONSTANT 
      off : DWord := dw#16#0000_0000;
   END_VAR


BEGIN
	REGION "ON RESET REQUEST"
	    IF #reset THEN
	        #colorMask := #off;
	        #old.kp8DI := 16#0;
	        #old.logical := #rst.state;
	        #old.physical := #rst.state;
	        #retPhysical := #rst.feedback;
	        #retLogical := #rst.feedback;
	        RETURN;
	    END_IF;
	END_REGION
	
	REGION "ON CHANGE IN PARAMETER SET"
	    
	    IF #btnParams = #old.btnParam THEN
	        GOTO NOUPDATE;
	    END_IF;
	    
	    REGION "RESET MASK"
	        #colorMask := #off;
	    END_REGION
	    
	    REGION "FOR EACH BUTTON"
	        FOR #pBtn := 0 TO 7 DO
	    
	            REGION "BUTTON COLOR FOR OFF STATE"
	                IF #btnParams.btn[#pBtn].activate THEN
	                    IF NOT #retLogical.acutal.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color off";
	                    END_IF;
	                END_IF;
	            END_REGION
	    
	            REGION "BUTTON COLOR FOR ON STATE"
	                IF #btnParams.btn[#pBtn].activate THEN
	                    IF #retLogical.acutal.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color on 1";
	                    END_IF;
	                END_IF;
	            END_REGION
	            
	            REGION "DEACTIVATED BUTTON"
	                (*
	                This is here for redundancy.
	                The "RESET MASK" region takes care of clearing old button colors.
	                *)
	                IF NOT #btnParams.btn[#pBtn].activate THEN
	                    #color := 'OFF';
	                END_IF;
	            END_REGION
	            
	            REGION "DRAW COLOR"
	                "KP8 Driver: Color"(btnColor := #colorMask,
	                                    btnNum := #pBtn,
	                                    lblColor := #color);
	            END_REGION
	            
	        END_FOR;
	    END_REGION
	
	END_REGION
	        
	NOUPDATE:
	        
	REGION "FEEDBACK"
	    
	    REGION "SCATTER KP8 INPUT BYTE"
	        SCATTER(IN := #kp8DI.%B1,
	                OUT => #btnPress.btn);
	    END_REGION
	
	    REGION "FOR EACH BUTTON"
	        FOR #pBtn := 0 TO 7 DO
	            
	            REGION "PHYSICAL FEEDBACK"
	                "KP8 Driver: Feedback"(signal := #btnPress.btn[#pBtn],
	                                       oldSignal := #old.physical.btn[#pBtn],
	                                       btnNumber := #pBtn,
	                                       feedback := #retPhysical);
	            END_REGION
	            
	            REGION "DETERMINE LOGICAL STATE"
	                "KP8 Driver: State"(press := #retPhysical,
	                                    btnNumber := #pBtn,
	                                    btnParams := #btnParams,
	                                    state := #retLogical);
	            END_REGION
	            
	
	            
	        END_FOR;
	    END_REGION
	    
	    REGION "FOR EACH BUTTON: LOGICAL FEEDBACK"
	        (*
	        this needs a separate loop so that group exclusivity can be evaluated
	        properly.
	        *)
	        FOR #pBtn := 0 TO 7 DO
	            "KP8 Driver: Feedback"(signal := #retLogical.acutal.btn[#pBtn],
	                                   oldSignal := #old.logical.btn[#pBtn],
	                                   btnNumber := #pBtn,
	                                   feedback := #retLogical);
	        END_FOR;
	    END_REGION
	    
	END_REGION
	
	REGION "ANIMATE BUTTONS"
	    
	    REGION "FOR EACH BUTTON"
	        FOR #pBtn := 0 TO 7 DO
	            
	            REGION "CHANGE COLOR TO ON 1" 
	                IF #retLogical.rising.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color on 1";
	                    #draw := TRUE;
	                END_IF;
	            END_REGION
	            
	            REGION "CHANGE COLOR TO OFF" 
	                IF #retLogical.falling.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color off";
	                    #draw := TRUE;
	                END_IF;
	            END_REGION
	            
	            REGION "FLASHING"
	                IF #retLogical.acutal.btn[#pBtn] THEN
	                    
	                    REGION "FLASH COLOR 1"
	                        IF NOT #btnParams.btn[#pBtn].flash THEN
	                            IF #old.btnParam.btn[#pBtn].flash THEN
	                                #color := #btnParams.btn[#pBtn]."color on 1";
	                                #draw := TRUE;
	                            END_IF;
	                        END_IF;
	                    END_REGION
	                    
	                    REGION "FLASH COLOR 2"
	                        IF #btnParams.btn[#pBtn].flash THEN
	                            IF NOT #old.btnParam.btn[#pBtn].flash THEN
	                                #color := #btnParams.btn[#pBtn]."color on 2";
	                                #draw := TRUE;
	                            END_IF;
	                        END_IF;
	                    END_REGION
	                    
	                END_IF;
	            END_REGION
	            
	            REGION "DRAW TO BUTTON"
	                IF #draw THEN
	                    #draw := FALSE;
	                    "KP8 Driver: Color"(btnColor := #colorMask,
	                                        btnNum := #pBtn,
	                                        lblColor := #color);
	                END_IF;
	            END_REGION
	            
	        END_FOR;
	    END_REGION
	    
	END_REGION
	
	REGION "CHANGE DETECTION"
	    #old.btnParam := #btnParams;
	    #old.kp8DI := #kp8DI;
	    #old.logical := #retLogical.acutal;
	    #old.physical := #btnPress;
	END_REGION
	
	REGION "OUTPUT"
	    #kp8DQ := #colorMask;
	    #physical := #retPhysical;
	    #logical := #retLogical;
	END_REGION
END_FUNCTION_BLOCK

