TYPE "KP8 Driver: Parameters: 1 Button"
VERSION : 0.1
   STRUCT
      activate : Bool;   // true = button on, flase = button off
      "color on 1" : String[10];   // color when button is in pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color on 2" : String[10];   // second flash color when button is pressed and flashing is enabled. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      "color off" : String[10];   // color when button is in un-pressed state. valid entries: 'red', 'green', 'blue', 'yellow', 'white', 'off'
      flash : Bool;   // false = color 1, true = color 2. set to clock bit to flash at that rate
      group : Int;   // 0 disables. buttons in groups have a mutually exclusive 'on' state.
      mode : Bool;   // true = maintained, fales = momentary
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Button States"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of Bool;
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Parameters: 8 Buttons"
VERSION : 0.1
   STRUCT
      btn : Array[0..7] of "KP8 Driver: Parameters: 1 Button";
   END_STRUCT;

END_TYPE

TYPE "KP8 Driver: Feedback Data"
VERSION : 0.1
   STRUCT
      acutal : "KP8 Driver: Button States";
      falling : "KP8 Driver: Button States";
      rising : "KP8 Driver: Button States";
   END_STRUCT;

END_TYPE

FUNCTION "kp8Driver.group" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      btnNumber : Int;
      btnsParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_IN_OUT 
      state : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      pBtn : Int;
      retState : "KP8 Driver: Feedback Data";
      testGroup : Int;
      thisGroup : Int;
   END_VAR


BEGIN
	REGION "COPY TO LOCAL"
	    #retState := #state;
	END_REGION
	
	REGION "GROUP 0 DISABLES GROUP MODE"
	    #thisGroup := #btnsParams.btn[#btnNumber].group;
	    IF #thisGroup <> 0 THEN
	        
	        REGION "FOR EACH BUTTONS' PARAMETERS"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "SKIP THE CURRENT BUTTON"
	                    IF #pBtn <> #btnNumber THEN
	                        GOTO NEXT;
	                    END_IF;
	                END_REGION
	                
	                REGION "GROUP EXCLUSION"
	                    #testGroup := #btnsParams.btn[#pBtn].group;
	                    IF #testGroup = #thisGroup THEN
	                        #retState.acutal.btn[#pBtn] := FALSE;
	                    END_IF;
	                END_REGION
	                
	            NEXT:
	                ;
	                
	            END_FOR;
	        END_REGION
	
	    END_IF;
	END_REGION
	
	REGION "OUTPUT"
	    #state := #retState;
	END_REGION
END_FUNCTION

FUNCTION "kp8Driver.toggle" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      signal : Bool;   // edge signal
   END_VAR

   VAR_IN_OUT 
      state : Bool;   // logical button state
   END_VAR


BEGIN
	IF #signal THEN
	    #state := NOT #state;
	END_IF;
END_FUNCTION

FUNCTION "kp8Driver.feedback" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      signal : "KP8 Driver: Button States";
      oldSignal : "KP8 Driver: Button States";
   END_VAR

   VAR_IN_OUT 
      feedback : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      pBtn : Int;
      ret : "KP8 Driver: Feedback Data";
   END_VAR


BEGIN
	REGION "ACTUAL"
	    #ret.acutal := #signal;
	END_REGION
	
	REGION "ON NEW INPUT"
	    IF #signal <> #oldSignal THEN
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "DEFAULT"
	                    #ret.rising.btn[#pBtn] := FALSE;
	                    #ret.falling.btn[#pBtn] := FALSE;
	                END_REGION
	                
	                REGION "RISING EDGE"
	                    IF #signal.btn[#pBtn] AND NOT #oldSignal.btn[#pBtn] THEN
	                        #ret.rising.btn[#pBtn] := TRUE;
	                    END_IF;
	                END_REGION
	                
	                REGION "FALLING EDGE"
	                    IF NOT #signal.btn[#pBtn] AND #oldSignal.btn[#pBtn] THEN
	                        #ret.falling.btn[#pBtn] := TRUE;
	                    END_IF;
	                END_REGION
	                
	            END_FOR;
	        END_REGION
	        
	    END_IF;
	END_REGION
	
	        
	REGION "OUTPUT"
	    #feedback := #ret;
	END_REGION
	
END_FUNCTION

FUNCTION "kp8Driver.state" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      press : "KP8 Driver: Feedback Data";
      btnParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_IN_OUT 
      state : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      pBtn : Int;
      retState : "KP8 Driver: Feedback Data";
   END_VAR


BEGIN
	REGION "BUTTTON IS ACTIVE"
	    IF #btnParams.btn[#pBtn].activate THEN
	        
	        REGION "COPY TO LOCAL"
	            #retState := #state;
	        END_REGION
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "MODE IS MOMENTARY"
	                    IF NOT #btnParams.btn[#pBtn].mode THEN
	                        #retState.acutal.btn[#pBtn] := #press.acutal.btn[#pBtn];
	                    END_IF;
	                END_REGION
	                
	                REGION "MAINTINED"
	                    IF #btnParams.btn[#pBtn].mode THEN
	                        "kp8Driver.toggle"(signal := #press.rising.btn[#pBtn],
	                                           state := #retState.acutal.btn[#pBtn]);
	                    END_IF;
	                END_REGION
	                
	                REGION "GROUP EXCLUSIVITY"
	                    IF #press.rising.btn[#pBtn] THEN
	                        "kp8Driver.group"(btnNumber := #pBtn,
	                                                btnsParams := #btnParams,
	                                                state := #retState);
	                    END_IF;
	                END_REGION
	                           
	           END_FOR;
	        END_REGION
	        
	        REGION "OUTPUT"
	            #state := #retState;
	        END_REGION
	        
	    END_IF;
	END_REGION
	
END_FUNCTION

FUNCTION_BLOCK "KP8 Driver"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 2.0
   VAR_INPUT 
      kp8DI : Word;
      reset : Bool;   // resets button states
      btnParams : "KP8 Driver: Parameters: 8 Buttons";
   END_VAR

   VAR_OUTPUT 
      kp8DQ : DWord;
      press : "KP8 Driver: Feedback Data";
      state { ExternalVisible := 'False'; ExternalWritable := 'False'} : "KP8 Driver: Feedback Data";
   END_VAR

   VAR DB_SPECIFIC
      colorMask { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DWord;
      old : Struct
         btnParam : "KP8 Driver: Parameters: 8 Buttons";
         btnPress : "KP8 Driver: Button States";
         btnState : "KP8 Driver: Button States";
      END_STRUCT;
   END_VAR
   VAR 
      btnPress { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "KP8 Driver: Button States";
   END_VAR
   VAR DB_SPECIFIC
      retState : "KP8 Driver: Feedback Data";
   END_VAR

   VAR_TEMP 
      color : String;
      draw : Bool;
      pBtn : Int;
      retPress : "KP8 Driver: Feedback Data";
   END_VAR

   VAR CONSTANT 
      initBtnColors : DWord := dw#16#0000_0000;
   END_VAR


BEGIN
	(* REGION "ON RESET REQUEST"
	    IF #reset THEN
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "RESET STATES"
	                    #old.btnState.btn[#pBtn] := 0;
	                    #Static_1.btn[#pBtn] := 0;
	                    #colorMask := #initBtnColors;
	                END_REGION
	
	            END_FOR;
	        END_REGION
	
	        REGION "EXIT FUNCTION"
	            RETURN;
	        END_REGION
	
	    END_IF;
	END_REGION *)
	
	(* REGION "ON CHANGE IN PARAMETER SET"
	    IF #btnParams <> #old.btnParam THEN
	        
	        REGION "FOR EACH BUTTON"
	            FOR #pBtn := 0 TO 7 DO
	                
	                REGION "RESET MASK"
	                    #colorMask := #initBtnColors;
	                END_REGION
	
	                REGION "BUTTON COLOR FOR OFF STATE"
	                    IF #btnParams.btn[#pBtn].activate AND NOT #Static_1.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color off";
	                    END_IF;
	                END_REGION
	
	                REGION "BUTTON COLOR FOR ON STATE"
	                    IF #btnParams.btn[#pBtn].activate AND #Static_1.btn[#pBtn] THEN
	                        #color := #btnParams.btn[#pBtn]."color on 1";
	                    END_IF;
	                END_REGION
	                
	                REGION "DEACTIVATED BUTTON"
	                    (*
	                    This is here for redundancy.
	                    The "RESET MASK" region takes care of clearing old button colors.
	                    *)
	                    IF NOT #btnParams.btn[#pBtn].activate THEN
	                        #color := 'off';
	                    END_IF;
	                END_REGION
	                
	                REGION "DRAW COLOR"
	                    "kp8Driver.getBtnColor"(btnColor := #colorMask,
	                                               btnNum := #pBtn,
	                                               lblColor := #color);
	                END_REGION
	                
	            END_FOR;
	        END_REGION
	        
	    END_IF;
	END_REGION *)
	
	REGION "FEEDBACK"
	    
	    REGION "SET PRESS FEEDBACK"
	        SCATTER(IN := #kp8DI.%B1,
	                OUT => #btnPress.btn);
	        "kp8Driver.feedback"(signal := #btnPress,
	                             oldSignal := #old.btnPress,
	                             feedback := #retPress);
	    END_REGION
	            
	    REGION "MANAGE BUTTON STATES"
	        "kp8Driver.state"(press := #retPress,
	                          btnParams := #btnParams,
	                          state := #retState);
	    END_REGION
	            
	    REGION "SET STATE FEEDBACK"
	        "kp8Driver.feedback"(signal := #retState.acutal,
	                             oldSignal := #old.btnState,
	                             feedback := #retState);
	    END_REGION
	    
	END_REGION
	
	(* REGION "ANIMATE BUTTONS"
	    
	    REGION "FOR EACH BUTTON"
	        FOR #pBtn := 0 TO 7 DO
	            
	            REGION "ON CHANGE IN STATE TO 'ON'" 
	                IF #Static_1.btn[#pBtn] <> NOT #old.btnState.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color on 1";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "ON CHANGE IN STATE TO 'OFF'" 
	                IF NOT #Static_1.btn[#pBtn] <> #old.btnState.btn[#pBtn] THEN
	                    #color := #btnParams.btn[#pBtn]."color off";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "FLASH COLOR 1"
	                IF NOT #btnParams.btn[#pBtn].flash AND #old.btnParam.btn[#pBtn].flash THEN
	                    #color := #btnParams.btn[#pBtn]."color on 1";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "FLASH COLOR 2"
	                IF #btnParams.btn[#pBtn].flash AND NOT #old.btnParam.btn[#pBtn].flash THEN
	                    #color := #btnParams.btn[#pBtn]."color on 2";
	                    #draw := true;
	                END_IF;
	            END_REGION
	            
	            REGION "DRAW TO BUTTON"
	                IF #draw THEN
	                    #draw := FALSE;
	                    "kp8Driver.getBtnColor"(btnColor := #colorMask,
	                                               btnNum := #pBtn,
	                                               lblColor := #color);
	                END_IF;
	            END_REGION
	            
	        END_FOR;
	    END_REGION
	    
	END_REGION *)
	
	REGION "CHANGE DETECTION"
	    #old.btnParam := #btnParams;
	    #old.btnPress := #btnPress;
	    #old.btnState := #retState.acutal;
	END_REGION
	
	REGION "OUTPUT"
	    #kp8DQ := #colorMask;
	    #press := #retPress;
	    #state := #retState;
	END_REGION
END_FUNCTION_BLOCK

